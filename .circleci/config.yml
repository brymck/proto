version: 2.0
aliases:
  - &touch-persisted-files
    # Make depends on file modification times to determine whether a file needs to be regenerated. After attaching files
    # persisted from a prior workspace, we may want to touch all of them to ensure Make doesn't attempt to regenerate
    # them.
    run:
      name: Touch persisted files
      command: |
        if [ -d dependencies ]; then find dependencies/ -type f -exec touch {} +; fi
        if [ -d gen ]; then find gen/ -type f -exec touch {} +; fi
        if [ -d packages ]; then find packages/ -type f -exec touch {} +; fi
        if [ -d site ]; then find site/ -type f -exec touch {} +; fi
        if [ -f site.tar ]; then touch site.tar; fi
  - &log-in-to-docker
    run:
      name: Log in to Docker
      command: echo $DOCKER_PASSWORD | docker login $REGISTRY --username $DOCKER_USERNAME --password-stdin
      environment:
        REGISTRY: brymck-docker-local.jfrog.io
  - &set-up-venv
    run:
      name: Create Python virtual environment
      command: |
        if [ ! -d venv ]; then python -m venv venv; fi
        echo "source $(pwd)/venv/bin/activate" >> $BASH_ENV
  - &set-up-gradle-properties
    run:
      name: Set up gradle.properties
      command: |
        mkdir -p ~/.gradle
        cat <<EOF > ~/.gradle/gradle.properties
        artifactory_user=${ARTIFACTORY_USERNAME}
        artifactory_password=${ARTIFACTORY_PASSWORD}
        artifactory_contextUrl=https://brymck.jfrog.io/brymck
        EOF
  - &set-up-pypirc
    run:
      name: Set up .pypirc
      command: |
        cat <<EOF > ~/.pypirc
        [distutils]
        index-servers = local
        [local]
        repository: https://brymck.jfrog.io/brymck/api/pypi/pypi-local
        username: ${ARTIFACTORY_USERNAME}
        password: ${ARTIFACTORY_PASSWORD}
        EOF
  - &set-up-npmrc
    run:
      name: Set up .npmrc
      command: false
  - &set-npm-prefix
    # The NPM prefix defaults to /usr/local, which will give us permission errors if we attempt to run `npm link` or
    # any other global command
    run:
      name: Set NPM prefix
      command: npm config set prefix ~/.npm-global
  - &set-up-jfrog
    run:
      name: Set up JFrog CLI
      command: false
  - &set-version
    run:
      name: Set version
      command: |
        # Determine whether it's a release based on the presence of $CIRCLE_TAG
        if [ -n "$CIRCLE_TAG" ]; then
          is_release=true
        else
          is_release=false
        fi

        # Determine the base version from the most recent tag
        last_tag="$(git describe --exact-match HEAD 2>/dev/null)" || true
        if [ -n "$last_tag" ]; then
          # If this is a tag but is not flagged as a release, go back to the previous tag
          if [ "$is_release" = false ]; then
            last_tag="$(git describe --tags "$(git rev-list --tags --max-count=2 | tail -1)" --abbrev=0)"
          fi
        else
          last_tag="$(git describe --abbrev=0)"
        fi
        commits_since_last_tag="$(git rev-list "$last_tag"..HEAD --count)"
        base_version="$(echo "$last_tag" | sed -e 's/^v//')"

        # Export variables as part of base Bash environment
        echo "export BASE_VERSION=$base_version" >> $BASH_ENV
        echo "export COMMITS_SINCE_LAST_TAG=$commits_since_last_tag" >> $BASH_ENV
        echo "export IS_RELEASE=$is_release" >> $BASH_ENV
  - &all-tags-and-branches
    filters:
      tags:
        only: /v[0-9]+\.[0-9]+\.[0-9]+/
jobs:
  # Generate code with Prototool
  generate-code:
    docker:
      - image: circleci/node:13
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Generate code with Prototool
          command: make prototool
      - persist_to_workspace:
          root: .
          paths:
            - dependencies
            - gen

  # Build Protobuf registry site
  generate-site:
    docker:
      - image: circleci/node:13
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - *touch-persisted-files
      - run:
          name: Generate Protobuf registry site
          command: make generate-site
      - persist_to_workspace:
          root: .
          paths: site

  # Reorganize generated code into packages
  package:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *touch-persisted-files
      - *set-up-venv
      - *set-version
      - run:
          name: Install Python requirements
          command: pip install --requirement requirements.package.txt
      - run:
          name: Generate dependency metadata
          command: make dependencies
      - run:
          name: Organize generated code into package directories
          command: make package BASE_VERSION=$BASE_VERSION COMMITS_SINCE_LAST_TAG=$COMMITS_SINCE_LAST_TAG IS_RELEASE=$IS_RELEASE
      - persist_to_workspace:
          root: .
          paths:
            - dependencies
            - packages
            - venv

  # Build the Go libraries
  build-go:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *touch-persisted-files
      - run:
          name: Build Go libraries
          command: make build-go
      - persist_to_workspace:
          root: .
          paths: packages/go

  # Build the Java libraries
  build-java:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *touch-persisted-files
      - *set-up-gradle-properties
      - run:
          name: Build Java libraries
          command: make build-java
      - persist_to_workspace:
          root: .
          paths: packages/java

  # Build the Node libraries
  build-node:
    docker:
      - image: circleci/node:13
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *touch-persisted-files
      - *set-up-npmrc
      - *set-npm-prefix
      - run:
          name: Build Node libraries
          command: make build-node
      - persist_to_workspace:
          root: .
          paths: packages/node

  # Build the Python libraries
  build-python:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *touch-persisted-files
      - *set-up-venv
      - run:
          name: Install Python requirements
          command: pip install --requirement requirements.build.txt
      - *set-up-pypirc
      - run:
          name: Build Python libraries
          command: make build-python
      - persist_to_workspace:
          root: .
          paths: packages/python

  # Build Protobuf registry site
  build-site:
    docker:
      - image: circleci/node:13
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - *touch-persisted-files
      - run:
          name: Build and archive Protobuf registry site
          command: make build-site
      - persist_to_workspace:
          root: .
          paths: site.tar

  # Deploy the Go libraries
  deploy-go:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *touch-persisted-files
      - *set-up-jfrog
      - run:
          name: Build Go libraries
          command: make deploy-go

  # Deploy the Java libraries
  deploy-java:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *touch-persisted-files
      - *set-up-gradle-properties
      - run:
          name: Deploy Java libraries
          command: make deploy-java

  # Deploy the Node libraries
  deploy-node:
    docker:
      - image: circleci/node:13
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *touch-persisted-files
      - *set-up-npmrc
      - *set-npm-prefix
      - run:
          name: Deploy Node libraries
          command: make deploy-node

  # Deploy the Python libraries
  deploy-python:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *touch-persisted-files
      - *set-up-venv
      - run:
          name: Install Python requirements
          command: pip install --requirement requirements.deploy.txt
      - *set-up-pypirc
      # We have some weird issue where `make deploy-python` is redoing builds, so we have this `touch` to make sure we
      # don't try to rebuild anything.
      - run:
          name: Touch timestamp files
          command: touch packages/python/*/.dirstamp
      - run:
          name: Deploy Python libraries
          command: make deploy-python

  # Deploy Protobuf registry site
  deploy-site:
    docker:
      - image: circleci/node:13
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - *touch-persisted-files
      - *log-in-to-docker
      - run:
          name: Load site archive
          command: docker load --input site.tar
      - run:
          name: Deploy Protobuf registry site
          command: make deploy-site

workflows:
  version: 2
  default:
    jobs:
      - generate-code:
          context: default
          <<: *all-tags-and-branches
      - generate-site:
          context: default
          requires:
            - generate-code
          <<: *all-tags-and-branches
      - package:
          context: default
          requires:
            - generate-code
          <<: *all-tags-and-branches
      - build-go:
          context: default
          requires:
            - package
          <<: *all-tags-and-branches
      - build-java:
          context: default
          requires:
            - package
          <<: *all-tags-and-branches
      - build-node:
          context: default
          requires:
            - package
          <<: *all-tags-and-branches
      - build-python:
          context: default
          requires:
            - package
          <<: *all-tags-and-branches
      - build-site:
          context: default
          requires:
            - generate-site
          <<: *all-tags-and-branches
      - deploy-go:
          context: default
          requires:
            - build-go
          <<: *all-tags-and-branches
      - deploy-java:
          context: default
          requires:
            - build-java
          filters:
            branches:
              only: master
            tags:
              only: /v[0-9]+\.[0-9]+\.[0-9]+/
      - deploy-node:
          context: default
          requires:
            - build-node
          filters:
            branches:
              only: master
            tags:
              only: /v[0-9]+\.[0-9]+\.[0-9]+/
      - deploy-python:
          context: default
          requires:
            - build-python
          filters:
            branches:
              only: master
            tags:
              only: /v[0-9]+\.[0-9]+\.[0-9]+/
      - deploy-site:
          context: default
          requires:
            - build-site
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+\.[0-9]+\.[0-9]+/
